// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`OpenAPI Generation > should correctly apply route-level metadata 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {},
  },
  "info": {
    "title": "RouteMetadataService API Spec",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/metadata-get": {
      "get": {
        "description": "This endpoint demonstrates route-level metadata for a GET request.",
        "operationId": "getMetadataExample",
        "parameters": [
          {
            "description": "A custom header parameter",
            "in": "header",
            "name": "customParam",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
          {
            "in": "query",
            "name": "query",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "result",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
        "summary": "Get data with metadata",
        "tags": [
          "Metadata",
          "Examples",
        ],
      },
    },
    "/metadata-post": {
      "post": {
        "description": "This endpoint demonstrates route-level metadata for a POST request.",
        "operationId": "postMetadataExample",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "query": {
                    "type": "string",
                  },
                },
                "required": [
                  "query",
                ],
                "type": "object",
              },
            },
          },
          "description": "",
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "result",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
        "summary": "Post data with metadata",
        "tags": [
          "Metadata",
        ],
      },
    },
  },
  "servers": [
    {
      "url": "/",
    },
  ],
}
`;

exports[`OpenAPI Generation > should correctly apply schema metadata (description, example, component registration) 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {
      "Order": {
        "description": "An order placed by a user",
        "properties": {
          "items": {
            "description": "List of products in the order",
            "items": {
              "$ref": "#/components/schemas/ProductItem",
            },
            "type": "array",
          },
          "orderId": {
            "description": "Unique order ID",
            "example": "ord-xyz",
            "type": "string",
          },
          "totalAmount": {
            "description": "Total amount of the order",
            "example": 123.45,
            "type": "number",
          },
        },
        "required": [
          "orderId",
          "items",
          "totalAmount",
        ],
        "type": "object",
      },
      "ProductItem": {
        "properties": {
          "productId": {
            "description": "ID of the product",
            "example": "prod-abc",
            "type": "string",
          },
          "quantity": {
            "description": "Quantity of the product",
            "example": 2,
            "exclusiveMinimum": true,
            "minimum": 0,
            "type": "integer",
          },
        },
        "required": [
          "productId",
          "quantity",
        ],
        "type": "object",
      },
      "UserProfile": {
        "description": "Detailed user profile information",
        "properties": {
          "age": {
            "description": "User's age",
            "example": 30,
            "exclusiveMinimum": true,
            "minimum": 0,
            "type": "integer",
          },
          "email": {
            "description": "User's email address",
            "example": "john.doe@example.com",
            "format": "email",
            "type": "string",
          },
          "userId": {
            "description": "Unique identifier for the product",
            "example": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
            "format": "uuid",
            "type": "string",
          },
          "username": {
            "description": "User's chosen username",
            "example": "johndoe",
            "minLength": 3,
            "type": "string",
          },
        },
        "required": [
          "userId",
          "username",
          "age",
          "email",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "title": "SchemaMetadataService API Spec",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/orders": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "items": {
                    "description": "List of products in the order",
                    "items": {
                      "$ref": "#/components/schemas/ProductItem",
                    },
                    "type": "array",
                  },
                  "totalAmount": {
                    "description": "Total amount of the order",
                    "example": 123.45,
                    "type": "number",
                  },
                },
                "required": [
                  "items",
                  "totalAmount",
                ],
                "type": "object",
              },
            },
          },
          "description": "",
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
    "/profiles/{userId}": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfile",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "/",
    },
  ],
}
`;

exports[`OpenAPI Generation > should correctly represent arrays and unions 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {},
  },
  "info": {
    "title": "ComplexService API Spec",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/process": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "data": {
                    "items": {
                      "properties": {
                        "id": {
                          "type": "string",
                        },
                        "value": {
                          "type": "string",
                        },
                      },
                      "required": [
                        "id",
                        "value",
                      ],
                      "type": "object",
                    },
                    "type": "array",
                  },
                  "result": {
                    "anyOf": [
                      {
                        "type": "string",
                      },
                      {
                        "type": "number",
                      },
                    ],
                  },
                  "status": {
                    "enum": [
                      "pending",
                      "completed",
                      "failed",
                    ],
                    "type": "string",
                  },
                  "tags": {
                    "items": {
                      "type": "string",
                    },
                    "minItems": 1,
                    "type": "array",
                  },
                },
                "required": [
                  "tags",
                  "status",
                  "result",
                ],
                "type": "object",
              },
            },
          },
          "description": "",
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "details": {
                      "anyOf": [
                        {
                          "items": {
                            "type": "string",
                          },
                          "type": "array",
                        },
                        {
                          "nullable": true,
                        },
                        {
                          "nullable": true,
                        },
                      ],
                    },
                    "itemsProcessed": {
                      "type": "number",
                    },
                    "summary": {
                      "type": "string",
                    },
                  },
                  "required": [
                    "summary",
                    "details",
                    "itemsProcessed",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "/",
    },
  ],
}
`;

exports[`OpenAPI Generation > should generate a well-formed OpenAPI document for basic types 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {},
  },
  "info": {
    "title": "BasicService API Spec",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/basic": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "age": {
                    "exclusiveMinimum": true,
                    "minimum": 0,
                    "type": "integer",
                  },
                  "email": {
                    "format": "email",
                    "type": "string",
                  },
                  "isActive": {
                    "default": true,
                    "type": "boolean",
                  },
                  "name": {
                    "maxLength": 255,
                    "minLength": 3,
                    "type": "string",
                  },
                },
                "required": [
                  "name",
                  "age",
                ],
                "type": "object",
              },
            },
          },
          "description": "",
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "age": {
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "createdAt": {
                      "format": "date-time",
                      "type": "string",
                    },
                    "email": {
                      "format": "email",
                      "type": "string",
                    },
                    "id": {
                      "format": "uuid",
                      "type": "string",
                    },
                    "isActive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "name": {
                      "maxLength": 255,
                      "minLength": 3,
                      "type": "string",
                    },
                  },
                  "required": [
                    "id",
                    "name",
                    "age",
                    "createdAt",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
    "/basic/:id": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "age": {
                      "exclusiveMinimum": true,
                      "minimum": 0,
                      "type": "integer",
                    },
                    "createdAt": {
                      "format": "date-time",
                      "type": "string",
                    },
                    "email": {
                      "format": "email",
                      "type": "string",
                    },
                    "id": {
                      "format": "uuid",
                      "type": "string",
                    },
                    "isActive": {
                      "default": true,
                      "type": "boolean",
                    },
                    "name": {
                      "maxLength": 255,
                      "minLength": 3,
                      "type": "string",
                    },
                  },
                  "required": [
                    "id",
                    "name",
                    "age",
                    "createdAt",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "/",
    },
  ],
}
`;

exports[`OpenAPI Generation > should handle optional, nullable, and default values 1`] = `
{
  "components": {
    "parameters": {},
    "schemas": {},
  },
  "info": {
    "title": "OptionalService API Spec",
    "version": "1.0",
  },
  "openapi": "3.0.0",
  "paths": {
    "/optional": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "count": {
                      "default": 0,
                      "type": "number",
                    },
                    "description": {
                      "type": "string",
                    },
                    "name": {
                      "type": "string",
                    },
                    "notes": {
                      "nullable": true,
                      "type": "string",
                    },
                  },
                  "required": [
                    "name",
                    "notes",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Success",
          },
        },
      },
    },
  },
  "servers": [
    {
      "url": "/",
    },
  ],
}
`;
